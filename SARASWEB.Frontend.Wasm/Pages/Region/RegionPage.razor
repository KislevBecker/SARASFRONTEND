@page "/configuracion-region"
@using SARASWEB.Frontend.Wasm.Components.Region
@inject ITransferenciaPropiaControlador controlador
@inject IProductoAplicacion productoAplicacion
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<div class="row">
    <div class="col-12">
        <div class="page-title-box">
            <HeadPageComponent Titulo="SARAS" Categoria="Administración de variables económicas FUD" Pagina="Región" />
        </div>
    </div>
    <div class="card">
        <div class="card-body">
            <div id="progressbarwizard">
                <WizardPestañasRegionComponent Wizard="controlador.Wizard" ErrorColor="ErrorColor" />
                <div class="tab-content b-0 mb-0">

                    <WizardHeadRegionComponent BarraPorcentaje="@controlador.BarraPorcentaje"
                                                            MostrarLoader="controlador.MostrarLoader" />

                    <FrmRegionComponent Wizard="controlador.Wizard"
                                                     propiaFrmDTO="propiaFrmDTO"
                                                     CuentasDTO="cuentasDTO"
                                                     Siguiente="ValidarTransferenciaPropia" />
                    <EnviarRegionComponent PropiaFrmDTO="propiaFrmDTO"
                                                  Wizard="controlador.Wizard" />
                    @if (Error)
                    {
                        <ErrorRegionComponent confirmarTransferenciaDTO="confirmarTransferenciaDTO"
                                                     Wizard="controlador.Wizard" />
                    }
                    else
                    {
                        <MensajeRegionComponent confirmarTransferenciaDTO="confirmarTransferenciaDTO"
                                                      Wizard="controlador.Wizard" />
                    }
                    <WizardBotonesRegionComponent AtrasStep="controlador.AtrasStep"
                                                               MostrarBotonesWizard="controlador.MostrarBotonesWizard"
                                                               Siguiente="controlador.Siguiente" />
                </div>
                <div class="tab-content b-0 mt-2 mb-0">
                    <TablaRegion />
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    private bool Error = false;
    private string ErrorColor = "";
    private bool EnAccion = false;
    private string usuarioSesion = "";
    private string emailSesion = "";
    private string cifSesion = "";
    private string userAgent { get; set; }
    private string ip { get; set; }
    private PropiaFrmDTO propiaFrmDTO = new PropiaFrmDTO();
    private List<CuentasDTO> cuentasDTO = new List<CuentasDTO>();
    private ConfirmarTransferenciaDTO confirmarTransferenciaDTO = new ConfirmarTransferenciaDTO();

    protected override async Task OnParametersSetAsync()
    {
        //var loader = Modal.Show<Loading>("", blazoredService.SinCerrar());
        //var obtenerSesion = await seguridadService.ObtenerSesion();
        //usuarioSesion = obtenerSesion.Usuario;
        //emailSesion = obtenerSesion.Email;
        //cifSesion = obtenerSesion.Cif;
        var obtenerCuentas = await productoAplicacion.ObtenerCuentas(new RequestCuentaDTO { cif = "          99255185" });
        cuentasDTO = obtenerCuentas.Entidad.ToList();

        foreach (var cuenta in obtenerCuentas.Entidad)
        {
            cuenta.moneda = (cuenta.moneda == "LPS") ? "L" : "$";
        }
        //loader.Close();
    }

    private async Task ValidarTransferenciaPropia()
    {
        if (EnAccion)
            return;

        EnAccion = true;
        bool validador = true;
        if (propiaFrmDTO.cuentaDestino == propiaFrmDTO.cuentaOrigen)
        {
            validador = false;
            EnAccion = false;
            await JS.ConfirmError("Advertencia", "Las cuentas deben ser diferentes", "warning");
            return;
        }

        if (validador)
        {
            var cuenta = new CuentaObtenerInformacionDTO
            {
                Cuenta = propiaFrmDTO.cuentaOrigen
            };
            var monedaCuenta = await productoAplicacion.ObtenerInformacionCuenta(cuenta);
            propiaFrmDTO.moneda = (monedaCuenta.Entidad.Moneda == "LPS") ? "L" : "$";
            EnAccion = false;
            await controlador.Siguiente();
        }
    }
}
